-----------Gradient Boosting---------
***** Random Search *****
Cross-Validation:10 and number of iterations:30
# Tuning hyper-parameters for accuracy

Best parameters and scores set found on development set:
{'random_state': None, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.991512345679

Random scores on development set:
0.977 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.987 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.972 (+/-0.020) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.990 (+/-0.023) for {'random_state': 50, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.926 (+/-0.038) for {'random_state': None, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.961 (+/-0.030) for {'random_state': 50, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.991 (+/-0.021) for {'random_state': None, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.988 (+/-0.017) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.992 (+/-0.021) for {'random_state': None, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.973 (+/-0.031) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.989 (+/-0.020) for {'random_state': None, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.986 (+/-0.015) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.964 (+/-0.026) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.922 (+/-0.018) for {'random_state': None, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.025) for {'random_state': 50, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.961 (+/-0.031) for {'random_state': None, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.977 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.987 (+/-0.017) for {'random_state': None, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.989 (+/-0.024) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.924 (+/-0.026) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.964 (+/-0.026) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.982 (+/-0.014) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.961 (+/-0.030) for {'random_state': 50, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.971 (+/-0.030) for {'random_state': None, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.989 (+/-0.025) for {'random_state': None, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.973 (+/-0.031) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.025) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.975 (+/-0.025) for {'random_state': None, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.017) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.989 (+/-0.024) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}

# Tuning hyper-parameters for precision

Best parameters and scores set found on development set:
{'random_state': 50, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.990740740741

Random scores on development set:
0.990 (+/-0.023) for {'random_state': 50, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.974 (+/-0.024) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.981 (+/-0.019) for {'random_state': None, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.972 (+/-0.020) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.017) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.986 (+/-0.015) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.924 (+/-0.026) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.972 (+/-0.020) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.025) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.985 (+/-0.020) for {'random_state': None, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.915 (+/-0.027) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.989 (+/-0.022) for {'random_state': None, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.991 (+/-0.021) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.989 (+/-0.024) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.988 (+/-0.025) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.986 (+/-0.015) for {'random_state': None, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.985 (+/-0.028) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.985 (+/-0.024) for {'random_state': None, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.986 (+/-0.015) for {'random_state': 20, 'n_estimators': 100, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.920 (+/-0.035) for {'random_state': None, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.988 (+/-0.017) for {'random_state': 20, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.977 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.982 (+/-0.014) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.977 (+/-0.017) for {'random_state': None, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.987 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'log2', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.968 (+/-0.022) for {'random_state': None, 'n_estimators': 150, 'max_features': 'log2', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.957 (+/-0.035) for {'random_state': None, 'n_estimators': 100, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}
0.991 (+/-0.021) for {'random_state': 50, 'n_estimators': 150, 'max_features': 'sqrt', 'learning_rate': 0.5, 'criterion': 'friedman_mse'}
0.987 (+/-0.024) for {'random_state': 50, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 1.0, 'criterion': 'friedman_mse'}
0.924 (+/-0.026) for {'random_state': 20, 'n_estimators': 50, 'max_features': 'sqrt', 'learning_rate': 0.1, 'criterion': 'friedman_mse'}