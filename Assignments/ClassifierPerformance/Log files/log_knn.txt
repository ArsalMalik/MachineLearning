-----------K-Nearest Neighbors---------
***** Random Search *****
Cross-Validation:10 and number of iterations:30
# Tuning hyper-parameters for accuracy

Best parameters and scores set found on development set:
{'weights': 'distance', 'p': 1, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.922067901235

Random scores on development set:
0.790 (+/-0.026) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.919 (+/-0.037) for {'weights': 'distance', 'p': 1, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.921 (+/-0.038) for {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.915 (+/-0.028) for {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.791 (+/-0.025) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.896 (+/-0.037) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.883 (+/-0.054) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.914 (+/-0.025) for {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.860 (+/-0.036) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.892 (+/-0.038) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.917 (+/-0.033) for {'weights': 'distance', 'p': 1, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.796 (+/-0.033) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.900 (+/-0.045) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 5, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.801 (+/-0.027) for {'weights': 'distance', 'p': 2, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.806 (+/-0.022) for {'weights': 'distance', 'p': 2, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.792 (+/-0.034) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.899 (+/-0.040) for {'weights': 'distance', 'p': 1, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.887 (+/-0.053) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.898 (+/-0.042) for {'weights': 'distance', 'p': 2, 'n_neighbors': 5, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.829 (+/-0.026) for {'weights': 'distance', 'p': 1, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.898 (+/-0.042) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.887 (+/-0.046) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.829 (+/-0.026) for {'weights': 'distance', 'p': 1, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.900 (+/-0.044) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.851 (+/-0.043) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.867 (+/-0.037) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.834 (+/-0.042) for {'weights': 'distance', 'p': 1, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.922 (+/-0.038) for {'weights': 'distance', 'p': 1, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.900 (+/-0.041) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 5, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.866 (+/-0.042) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'kd_tree'}

# Tuning hyper-parameters for precision

Best parameters and scores set found on development set:
{'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.920524691358

Random scores on development set:
0.918 (+/-0.037) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.871 (+/-0.049) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.899 (+/-0.040) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.791 (+/-0.015) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.917 (+/-0.031) for {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.867 (+/-0.033) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.792 (+/-0.034) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.831 (+/-0.028) for {'weights': 'distance', 'p': 1, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.806 (+/-0.034) for {'weights': 'distance', 'p': 2, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.883 (+/-0.054) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.866 (+/-0.052) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.916 (+/-0.035) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.796 (+/-0.033) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.790 (+/-0.026) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.790 (+/-0.029) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.895 (+/-0.036) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 5, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.918 (+/-0.037) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.871 (+/-0.049) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.898 (+/-0.042) for {'weights': 'distance', 'p': 2, 'n_neighbors': 5, 'n_jobs': 4, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.866 (+/-0.042) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'kd_tree'}
0.806 (+/-0.034) for {'weights': 'distance', 'p': 2, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'kd_tree'}
0.867 (+/-0.037) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 20, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.872 (+/-0.046) for {'weights': 'distance', 'p': 2, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.921 (+/-0.038) for {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.791 (+/-0.025) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 4, 'leaf_size': 45, 'algorithm': 'kd_tree'}
0.914 (+/-0.037) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 10, 'n_jobs': 4, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.892 (+/-0.038) for {'weights': 'distance', 'p': 1, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 15, 'algorithm': 'ball_tree'}
0.867 (+/-0.037) for {'weights': 'uniform', 'p': 2, 'n_neighbors': 20, 'n_jobs': 1, 'leaf_size': 45, 'algorithm': 'ball_tree'}
0.898 (+/-0.042) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 5, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}
0.790 (+/-0.026) for {'weights': 'uniform', 'p': 1, 'n_neighbors': 40, 'n_jobs': 1, 'leaf_size': 30, 'algorithm': 'ball_tree'}